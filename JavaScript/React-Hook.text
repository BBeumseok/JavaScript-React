리액트에서 사용되는 다양한 훅

1. useState() Hook

useState는 상태를 관리하는 훅 입니다.

- 함수형 컴포넌트 내부에 state를 추가하여 사용합니다.

- 현재 상태를 나타내는 state 값과 이 상태를 변경하는 setState 값을 한 쌍으로 제공합니다.

- state는 초기값을 설정할 수 있으며, 초기값은 첫 렌더링 때 한번만 사용됩니다.

- state는 객체일 필요없이 문자열, 숫자, boolean, 배열, null, 객체 등의 여러가지 다양한 값을 넣을 수 있습니다.


2. useEffect() Hook

useEffect는 기존 클래스형 컴포넌트에서 사용했던 componentDidMount, componentDidUpdate, componentWillUnMount를 하나의
API로 통합한 것으로 다음과 같은 특징을 가집니다.

- useEffect는 기본적으로 useEffect(function, deps)의 형태를 사용합니다.

- function에는 실행시킬 함수를 넣고, deps에는 의존성 배열을 담는다.

- 의존성 배열에 어떤 것이 담기느냐에 따라 부수적인 효과 함수가 실행된다.

- 의존성 배열 없이 useEffect를 실행시키게 되면 페이지가 렌더링 될 때마다 데이터를 불러온다.

- 의존성 배열에 빈 배열을 담아주게 될 경우에는 첫 렌더링 시에만 함수를 실행한다.

- 의존성 배열에 state 값이나 props로 상속받은 데이터값 등을 담아주게 되면 해당 값이 변할 때마다 함수를 실행한다.

- 이외에도 useEffect에서는 Unmount 시에 cleanup 함수를 적용시킬 수 있다.

** Clean-up 함수
useEffect()에서 파라미터로 넣은 함수의 반환 함수이다.

Component의 Unmount 이전 / Update 직전에 어떠한 작업을 수행하고 싶다면 Clean-up 함수를
반환해주어야 한다.

ex)
- Unmount 될 때
useEffect(function, [])

- Update 직전
useEffect(function, [특정값])

Clean-up 함수 사용 시 작동 순서
Re-Render => 이전 effect clean-up => effect 순서로 실행된다.


3. useRef() Hook

useRef는 특정 DOM에 접근하여 DOM 조작을 가능하게 하는 훅이다.

리액트 프로젝트에서도 특정 요소를 선택해야 하는 상황이 생길 수 있는데 이러한 상황에서 useRef()를 사용할 수 있게 된다.


4. useMemo, useCallback

useMemo와 useCallback은 모두 메모이제이션과 관련이 있어 리액트를 사용하며 성능 개선을 위해 많이 사용한다.

메모이제이션이라는 것은 기존에 수행한 연산의 결과 값을 어딘가에 저장해두었다가 동일한 입력이 들어오면 재활용하겠다는
프로그래밍 기법이라고 할 수 있다.
그렇기 때문에 useMemo나 useCallback 훅을 적절하게 사용하면 중복된 연산을 피할 수 있어 애플리케이션의 성능을 최적화 할 수 있다는 장점이 있다.

useMemo와 useCallback이 비슷한 동작을 하지만 분명한 차이가 존재한다.

useMemo의 경우에는 메모이제이션된 값을 반환하는 훅이고, useCallback은 메모이제이션 된 함수를 반환한다는 특징을 가진다.


5. Custom Hook

리액트에 내장된 이러한 훅 함수들을 활용해 직접 필요한 훅을 만들 수도 있다고 한다.

커스텀 훅을 활용하면 중복되는 코드를 줄일 수 있고, 이전 클래스형 React 컴포넌트에서는 불가능했던 로직 공유의 유연성을 제공한다.

